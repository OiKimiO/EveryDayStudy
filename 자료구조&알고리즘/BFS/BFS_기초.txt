package programmers;

import java.util.*;

public class BFS {
	/* BFS(너비 우선 탐색, Breadth First Search)
	    - "꼼꼼하게 좌우를 살피며 다니자"와 같이 시작 정점을 먼저 방문하고 멀리 떨어져 있는 정점을 나중에 방문하는 알고리즘이다. 
	    - 시작 정점을 지나고 나면 깊이가 1인 모든 정점을 방문하고, 그 다음에는 깊이가 2인 모든 정점을 방문한다. 
	      이런식으로 한 단계씩 깊이를 더해가며 해당 깊이에 있는 모든 정점들을 방문해 나가다가 나중에는 더 이상 방문할 곳이 없을 때 탐색을 종료한다.
	      * 루트 노드(혹은 다른 임의의 노드)에서 시작해서 인접한 노드를 먼저 탐색하는 방법 
	      * 사용하는 경우 : 두 노드 사이의 최단 경로 혹은 임의의 경로를 찾고 싶을 때 이 방법을 선택한다.
	     
	   BFS의 특징 
	    - BFS는 시작 정점으로부터 거리가 가까운 정점의 순서로 탐색한다(거리 1부터 2,3순서대로)
	    - 그래프 탐색의 경우 어떤 노드를 방문했었는지 여부를 반드시 검사해야 한다.
	      * 이를 검사하지 않을 경우 무한루프에 빠질 위험이 있다.
	    - BFS는 재귀적으로 동작하지 않는다. 
	    - BFS는 방문한 노드들을 차례로 저장한 후 꺼낼 수 있는 자료 구조인 큐(Queue)를 사용한다. 
	    - 즉, 선입선출(FIFO)원칙으로 탐색한다.
	    - 일반적으로 큐를 이용해서 반복적 형태로 구현하는 것이 가장 잘 작동한다.
	    - BFS는 큐가 공백 상태가 될 때까지 계속한다. 
	 * */
	
	public static void main(String[] args) {
		int n = 4; // 정점의 개수
		int m = 5; // 간선의 개수
		int v = 0; // 탐색을 시작할 정점의 번호 
		
		boolean[] visited = new boolean[n+1]; // 방문 여부를 검사할 배열
		
		// 사용할 정점들을 초기화 한다.
		LinkedList<Integer>[] adjList = new LinkedList[n+1];
		
		/* 각 정점에 연결된 인접한 노드들을 기록하기 위해
		   각 정점별로 LinkedList를 한번 더 초기화 합니다.
		   현재 구조 adjList = {  { 인접한 노드들 } // 1번째 정점(0번째 인덱스)
		   						, { 인접한 노드들 } // 2번째 정점(1번째 인덱스)
		   						, { 인접한 노드들 } // 3번째 정점(2번째 인덱스)
		   						, { 인접한 노드들 } // 4번째 정점(3번째 인덱스)
		   						, {}
		   						}
		 */
		for(int i = 0; i <= n; i++) {
			adjList[i] = new LinkedList<Integer>();
		}
		
		Scanner scan = new Scanner(System.in);
		/* 두 정점 사이에 여러 개의 간선이 있을 수 있다.
		   입력으로 주어지는 간선은 양방향이다.  */		
	    for(int i = 0; i < m; i++) { 
		   int v1 = scan.nextInt();
		   int v2 = scan.nextInt();
		   adjList[v1].add(v2);
		   adjList[v2].add(v1);			  			  
	    }
		
	    /* 방문순서를 위해 오름차순으로 정렬 
	        - 오름차순으로 정렬한 이유 
	           * 인접한 정점간의 간선 연결을 옳바르게 만들기 위해서 
	           * 예시 참고) 
	              1. 첫번째 정점 인덱스안에 인접한 첫번째 노드의 인덱스는 1이다.
	              2. 간선(인접한 정점간의 연결)의 연결이 잘 되었는지 확인하기 위해 
	                 2번째 정점의 첫번째 노드 인덱스를 확인한다. 
	                 입력 후 리스트의 경우 인덱스가 3(4번째 정점)을 가르키기때문에 간선간의 연결이 잘못되었음을 알 수 있다.
	                 정렬 후 리스트의 경우 인덱스가 0(1번째 정점)을 가르키기때문에 간선간의 연결이 옳바르게 되었음을 알 수 있다.
	        - 입력시 첫번째 정점(인덱스 : 0)말고 다른 정점 위치로 입력될 경우
	          각 링크드 리스트에 저장된 데이터의 순서가 입력순으로 저장될 수 있음 
	          예시) 입력 2,3
	                     1,3
						 0,1
						 0,2
						 0,3
	                							  입력 후 리스트  정렬 후 리스트 
	                 - 1번째 정점(0번째 인덱스) : [1, 2, 3]       [1, 2, 3] 
					 - 2번째 정점(1번째 인덱스) : [3, 0]		  [0, 3]
					 - 3번째 정점(2번째 인덱스) : [3, 0]		  [0, 3]
					 - 4번째 정점(3번째 인덱스) : [2, 1, 0]       [0, 1, 2]
					 - 							  []			  []					
	    */	    
	    for(int i = 1; i <= n; i++) {
	    	Collections.sort(adjList[i]);
	    }
	    
	    bfs_list(v,adjList,visited);
		
	}
	
	/* BFS(Breadth First Search) 너비 우선 탐색을 한다. 
	    - parameter  
	     * v       : 탐색을 시작할 정점의 번호
	     * adjList : 정점과 각 정점간의 인접한 정점을 표현한 LinkedList
	     * visited : 각 정점간의 방문 여부
	  */
	public static void bfs_list(int v, LinkedList<Integer>[] adjList, boolean[] visited) {
		Queue<Integer> queue = new LinkedList<Integer>();
		// 탐색을 시작할 정점의 번호가 방문을 했음을 표시 
		visited[v] = true;
		// 탐색을 시작할 정점의 번호를 탐색할 데이터(Queue)에 넣는다.
		queue.add(v);
		
		// 탐색할 데이터(Queue)에 데이터가 있으면 반복한다.
		while(queue.size() != 0) {
			// 탐색을 시작할 정점의 번호를 탐색할 데이터(Queue)에서 제거한다.
			v = queue.poll();
			System.out.println(v + " ");
			
			// 탐색을 시작할 정점의 번호에 인접한 정점(인덱스)이/가 있는지를 확인한다. 
			Iterator<Integer> iter = adjList[v].listIterator();
			// 인접한 정점(인덱스)이/가 존재한다면 반복한다.
			while(iter.hasNext()) {
				// 인접한 정점(인덱스)을/를 가져온다.
				int w = iter.next();
				// 인접한 정점(인덱스)이/가 방문한 기록이 없다면 아래 코드를 실행한다.
				if(!visited[w]) {
					// 인접한 정점(인덱스)의 방문 여부를 기록한다. 
					visited[w] = true;
					// 탐색을 시작할 정점(인덱스)을/를 추가한다.
					queue.add(w);
				}
			}
		}
	}
	// https://minhamina.tistory.com/36 페이지 참고
}
